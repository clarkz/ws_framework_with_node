// Generated by CoffeeScript 1.6.2
(function() {
  var DECLARATIONS, TYPES, castParameter, createColumns, msnodesql, typeDeclaration, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  msnodesql = require('msnodesql');

  util = require('util');

  TYPES = require('./datatypes').TYPES;

  DECLARATIONS = require('./datatypes').DECLARATIONS;

  castParameter = function(value, type) {
    switch (type) {
      case TYPES.VarChar:
      case TYPES.NVarChar:
      case TYPES.Char:
      case TYPES.NChar:
      case TYPES.Xml:
      case TYPES.Text:
      case TYPES.NText:
        if (typeof value !== 'string' && !(value instanceof String)) {
          value = value.toString();
        }
        break;
      case TYPES.Int:
      case TYPES.TinyInt:
      case TYPES.BigInt:
      case TYPES.SmallInt:
        if (typeof value !== 'number' && !(value instanceof Number)) {
          value = parseInt(value);
          if (isNaN(value)) {
            value = null;
          }
        }
        break;
      case TYPES.Float:
      case TYPES.Real:
      case TYPES.Decimal:
      case TYPES.Numeric:
      case TYPES.SmallMoney:
      case TYPES.Money:
        if (typeof value !== 'number' && !(value instanceof Number)) {
          value = parseFloat(value);
          if (isNaN(value)) {
            value = null;
          }
        }
        break;
      case TYPES.Bit:
        if (typeof value !== 'boolean' && !(value instanceof Boolean)) {
          value = Boolean(value);
        }
        break;
      case TYPES.DateTime:
      case TYPES.SmallDateTime:
      case TYPES.DateTimeOffset:
      case TYPES.Date:
        if (!(value instanceof Date)) {
          value = new Date(value);
        }
        break;
      case TYPES.Binary:
      case TYPES.VarBinary:
      case TYPES.Image:
        if (!(value instanceof Buffer)) {
          value = new Buffer(value.toString());
        }
    }
    return value;
  };

  createColumns = function(meta) {
    var out, value, _i, _len;

    out = {};
    for (_i = 0, _len = meta.length; _i < _len; _i++) {
      value = meta[_i];
      out[value.name] = {
        name: value.name,
        size: value.size,
        type: DECLARATIONS[value.sqlType]
      };
    }
    return out;
  };

  typeDeclaration = function(type) {
    switch (type) {
      case TYPES.VarChar:
      case TYPES.NVarChar:
      case TYPES.Char:
      case TYPES.NChar:
      case TYPES.Xml:
      case TYPES.Text:
      case TYPES.NText:
        return "" + type.name + " (MAX)";
      default:
        return type.name;
    }
  };

  module.exports = function(Connection, Request) {
    var MsnodesqlConnection, MsnodesqlRequest, _ref, _ref1;

    MsnodesqlConnection = (function(_super) {
      __extends(MsnodesqlConnection, _super);

      function MsnodesqlConnection() {
        _ref = MsnodesqlConnection.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      MsnodesqlConnection.prototype["native"] = null;

      MsnodesqlConnection.prototype.connect = function(config, callback) {
        var connectionString, _ref1,
          _this = this;

        if ((_ref1 = config.connectionString) == null) {
          config.connectionString = 'Driver={SQL Server Native Client 11.0};Server=#{server},#{port};Database=#{database};Uid=#{user};Pwd=#{password};';
        }
        connectionString = config.connectionString.replace(new RegExp('#{([^}]*)}', 'g'), function(p) {
          var _ref2;

          return (_ref2 = config[p.substr(2, p.length - 3)]) != null ? _ref2 : '';
        });
        return msnodesql.open(connectionString, function(err, conn) {
          if (err) {
            return callback(err);
          }
          _this["native"] = conn;
          return typeof callback === "function" ? callback(null) : void 0;
        });
      };

      MsnodesqlConnection.prototype.close = function(callback) {
        var _ref1;

        if ((_ref1 = this["native"]) != null) {
          _ref1.close();
        }
        this["native"] = null;
        return process.nextTick(function() {
          return typeof callback === "function" ? callback(null) : void 0;
        });
      };

      return MsnodesqlConnection;

    })(Connection);
    MsnodesqlRequest = (function(_super) {
      __extends(MsnodesqlRequest, _super);

      function MsnodesqlRequest() {
        _ref1 = MsnodesqlRequest.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      MsnodesqlRequest.prototype.connection = null;

      MsnodesqlRequest.prototype.query = function(command, callback) {
        var columns, handleOutput, input, name, output, param, recordset, recordsets, req, row, sets, started,
          _this = this;

        if (this.verbose && !this.nested) {
          console.log("---------- sql query ----------\n    query: " + command);
        }
        if (command.length === 0) {
          return process.nextTick(function() {
            var elapsed;

            if (this.verbose && !this.nested) {
              console.log("---------- response -----------");
              elapsed = Date.now() - started;
              console.log(" duration: " + elapsed + "ms");
              console.log("---------- completed ----------");
            }
            return typeof callback === "function" ? callback(null, this.multiple || this.nested ? [] : null) : void 0;
          });
        }
        row = null;
        columns = null;
        recordset = null;
        recordsets = [];
        started = Date.now();
        handleOutput = false;
        if (!this.nested) {
          input = (function() {
            var _ref2, _results;

            _ref2 = this.parameters;
            _results = [];
            for (name in _ref2) {
              param = _ref2[name];
              _results.push("@" + param.name + " " + (typeDeclaration(param.type)));
            }
            return _results;
          }).call(this);
          sets = (function() {
            var _ref2, _results;

            _ref2 = this.parameters;
            _results = [];
            for (name in _ref2) {
              param = _ref2[name];
              if (param.io === 1) {
                _results.push("set @" + param.name + "=?");
              }
            }
            return _results;
          }).call(this);
          output = (function() {
            var _ref2, _results;

            _ref2 = this.parameters;
            _results = [];
            for (name in _ref2) {
              param = _ref2[name];
              if (param.io === 2) {
                _results.push("@" + param.name + " as '" + param.name + "'");
              }
            }
            return _results;
          }).call(this);
          if (input.length) {
            command = "declare " + (input.join(',')) + ";" + (sets.join(';')) + ";" + command + ";";
          }
          if (output.length) {
            command += "select " + (output.join(',')) + ";";
            handleOutput = true;
          }
        }
        req = this.connection["native"].queryRaw(command, (function() {
          var _ref2, _results;

          _ref2 = this.parameters;
          _results = [];
          for (name in _ref2) {
            param = _ref2[name];
            if (param.io === 1) {
              _results.push(castParameter(param.value, param.type));
            }
          }
          return _results;
        }).call(this));
        if (this.verbose && !this.nested) {
          console.log("---------- response -----------");
        }
        req.on('meta', function(metadata) {
          if (row && _this.verbose) {
            console.log(util.inspect(row));
            console.log("---------- --------------------");
          }
          row = null;
          columns = metadata;
          recordset = [];
          Object.defineProperty(recordset, 'columns', {
            enumerable: false,
            value: createColumns(metadata)
          });
          return recordsets.push(recordset);
        });
        req.on('row', function(rownumber) {
          if (row && _this.verbose) {
            console.log(util.inspect(row));
            console.log("---------- --------------------");
          }
          row = {};
          return recordset.push(row);
        });
        req.on('column', function(idx, data, more) {
          var exi;

          exi = row[columns[idx].name];
          if (exi != null) {
            if (exi instanceof Array) {
              return exi.push(data);
            } else {
              return row[columns[idx].name] = [exi, data];
            }
          } else {
            return row[columns[idx].name] = data;
          }
        });
        req.once('error', function(err) {
          var elapsed;

          if (_this.verbose && !_this.nested) {
            elapsed = Date.now() - started;
            console.log("    error: " + err);
            console.log(" duration: " + elapsed + "ms");
            console.log("---------- completed ----------");
          }
          return typeof callback === "function" ? callback(err) : void 0;
        });
        return req.once('done', function() {
          var elapsed, last, _ref2, _ref3;

          if (!_this.nested) {
            if (_this.verbose) {
              if (row) {
                console.log(util.inspect(row));
                console.log("---------- --------------------");
              }
            }
            if (handleOutput) {
              last = (_ref2 = recordsets.pop()) != null ? _ref2[0] : void 0;
              _ref3 = _this.parameters;
              for (name in _ref3) {
                param = _ref3[name];
                if (!(param.io === 2)) {
                  continue;
                }
                param.value = last[param.name];
                if (_this.verbose) {
                  console.log("   output: @" + param.name + ", " + param.type.name + ", " + param.value);
                }
              }
            }
            if (_this.verbose) {
              elapsed = Date.now() - started;
              console.log(" duration: " + elapsed + "ms");
              console.log("---------- completed ----------");
            }
          }
          return typeof callback === "function" ? callback(null, _this.multiple || _this.nested ? recordsets : recordsets[0]) : void 0;
        });
      };

      MsnodesqlRequest.prototype.execute = function(procedure, callback) {
        var cmd, name, param, spp, started, _ref2,
          _this = this;

        if (this.verbose) {
          console.log("---------- sql execute --------\n     proc: " + procedure);
        }
        started = Date.now();
        cmd = "declare " + (['@__return int'].concat((function() {
          var _ref2, _results;

          _ref2 = this.parameters;
          _results = [];
          for (name in _ref2) {
            param = _ref2[name];
            if (param.io === 2) {
              _results.push("@" + param.name + " " + (typeDeclaration(param.type)));
            }
          }
          return _results;
        }).call(this)).join(', ')) + ";";
        cmd += "exec @__return = " + procedure + " ";
        spp = [];
        _ref2 = this.parameters;
        for (name in _ref2) {
          param = _ref2[name];
          if (param.io === 2) {
            spp.push("@" + param.name + "=@" + param.name + " output");
          } else {
            if (this.verbose) {
              console.log("    input: @" + param.name + ", " + param.type.name + ", " + param.value);
            }
            spp.push("@" + param.name + "=?");
          }
        }
        cmd += "" + (spp.join(', ')) + ";";
        cmd += "select " + (['@__return as \'__return\''].concat((function() {
          var _ref3, _results;

          _ref3 = this.parameters;
          _results = [];
          for (name in _ref3) {
            param = _ref3[name];
            if (param.io === 2) {
              _results.push("@" + param.name + " as '" + param.name + "'");
            }
          }
          return _results;
        }).call(this)).join(', ')) + ";";
        if (this.verbose) {
          console.log("---------- response -----------");
        }
        this.nested = true;
        return this.query(cmd, function(err, recordsets) {
          var elapsed, last, returnValue, _ref3, _ref4;

          _this.nested = false;
          if (err) {
            if (_this.verbose) {
              elapsed = Date.now() - started;
              console.log("    error: " + err);
              console.log(" duration: " + elapsed + "ms");
              console.log("---------- completed ----------");
            }
            return typeof callback === "function" ? callback(err) : void 0;
          } else {
            last = (_ref3 = recordsets.pop()) != null ? _ref3[0] : void 0;
            if (last && (last.__return != null)) {
              returnValue = last.__return;
              _ref4 = _this.parameters;
              for (name in _ref4) {
                param = _ref4[name];
                if (!(param.io === 2)) {
                  continue;
                }
                param.value = last[param.name];
                if (_this.verbose) {
                  console.log("   output: @" + param.name + ", " + param.type.name + ", " + param.value);
                }
              }
            }
            if (_this.verbose) {
              elapsed = Date.now() - started;
              console.log("   return: " + returnValue);
              console.log(" duration: " + elapsed + "ms");
              console.log("---------- completed ----------");
            }
            return typeof callback === "function" ? callback(null, recordsets, returnValue) : void 0;
          }
        });
      };

      return MsnodesqlRequest;

    })(Request);
    return {
      connection: MsnodesqlConnection,
      request: MsnodesqlRequest
    };
  };

}).call(this);
